using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using tgBot.Services;
using System.Text.RegularExpressions;
using tgBot.Context;

namespace tgBot;

public class TelegramBotHostedService : BackgroundService
{
    private readonly ITelegramBotClient _botClient;
    private readonly IServiceProvider _serviceProvider;
    private static readonly Dictionary<long, UserState> UserStates = new();
    private static readonly Dictionary<long, string> VerifiedUsers = new();
    private static readonly Dictionary<long, string> PendingCodes = new();
    private static readonly HttpClient httpClient = new();
    private const string CallMeBotApiKey = "6181691";

    public TelegramBotHostedService(ITelegramBotClient botClient, IServiceProvider serviceProvider)
    {
        _botClient = botClient;
        _serviceProvider = serviceProvider;
    }

    protected override async Task ExecuteAsync(CancellationToken stoppingToken)
    {
        _botClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            cancellationToken: stoppingToken
        );
        await Task.Delay(-1, stoppingToken);
    }

    private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken ct)
    {
        using var scope = _serviceProvider.CreateScope();
        var studentService = scope.ServiceProvider.GetRequiredService<StudentService>();
        var teacherService = scope.ServiceProvider.GetRequiredService<TeacherService>();
        var lessonService = scope.ServiceProvider.GetRequiredService<LessonService>();
        var subjectService = scope.ServiceProvider.GetRequiredService<SubjectService>();
        var slotService = scope.ServiceProvider.GetRequiredService<SlotService>();
        
        if (update.Type == UpdateType.CallbackQuery)
        {
            var callback = update.CallbackQuery;
            var callbackChatId = callback.Message?.Chat.Id ?? throw new InvalidOperationException("Message or Chat ID is null");
            using var callbackScope = _serviceProvider.CreateScope();
            var callbackStudentService = callbackScope.ServiceProvider.GetRequiredService<StudentService>();
            var callbackTeacherService = callbackScope.ServiceProvider.GetRequiredService<TeacherService>();
            var callbackLessonService = callbackScope.ServiceProvider.GetRequiredService<LessonService>();

            if (callback.Data!.StartsWith("lesson_"))
            {
                var studentId = int.Parse(VerifiedUsers[callbackChatId]);
                if (!int.TryParse(callback.Data.Replace("lesson_", ""), out var lessonId))
                {
                    await botClient.SendMessage(callbackChatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.");
                    return;
                }

                var lesson = callbackLessonService.GetLessonsByStudent(studentId).FirstOrDefault(l => l.Id == lessonId);
                if (lesson == null)
                {
                    await botClient.SendMessage(callbackChatId, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                var teacher = callbackTeacherService.GetTeacher();
                var detail = $"üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {lesson.Subject}\n" +
                           $"üë®‚Äçüè´ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> {teacher?.FullName ?? "-"}\n" +
                           $"üìÖ <b>–î–∞—Ç–∞:</b> {lesson.StartTime:dd.MM.yyyy}\n" +
                           $"‚è∞ <b>–í—Ä–µ–º—è:</b> {lesson.StartTime:HH:mm} - {lesson.EndTime:HH:mm}";

                var detailKeyboard = new InlineKeyboardMarkup(new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", $"cancel_{lesson.Id}")
                });

                await botClient.SendMessage(callbackChatId, detail, parseMode: ParseMode.Html, replyMarkup: detailKeyboard);
                await botClient.AnswerCallbackQuery(callback.Id);
                return;
            }

            if (callback.Data!.StartsWith("cancel_"))
            {
                var studentId = int.Parse(VerifiedUsers[callbackChatId]);
                if (!int.TryParse(callback.Data.Replace("cancel_", ""), out var lessonId))
                {
                    await botClient.SendMessage(callbackChatId, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.");
                    return;
                }

                var lesson = callbackLessonService.GetLessonsByStudent(studentId).FirstOrDefault(l => l.Id == lessonId);
                if (lesson == null)
                {
                    await botClient.SendMessage(callbackChatId, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                var slot = slotService.GetSlotById(lesson.Id);
                if (slot != null)
                {
                    slot.IsBooked = false;
                    callbackScope.ServiceProvider.GetRequiredService<TutorDbContext>().SaveChanges();
                }

                callbackScope.ServiceProvider.GetRequiredService<TutorDbContext>().Lessons.Remove(lesson);
                callbackScope.ServiceProvider.GetRequiredService<TutorDbContext>().SaveChanges();

                await botClient.SendMessage(callbackChatId, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!");
                await botClient.AnswerCallbackQuery(callback.Id);

                var lessons = callbackLessonService.GetLessonsByStudent(studentId);
                if (lessons.Count > 0)
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        lessons.Select(l => new[] {
                            InlineKeyboardButton.WithCallbackData($"üìö {l.Subject} {l.StartTime:dd.MM HH:mm}", $"lesson_{l.Id}")
                        })
                    );
                    await botClient.SendMessage(callbackChatId, "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:", replyMarkup: inlineKeyboard);
                }
                return;
            }
            return;
        }

        if (update.Type != UpdateType.Message || update.Message!.Type != MessageType.Text)
            return;
        var message = update.Message;
        var chatId = message.Chat.Id;
        
        if (!UserStates.ContainsKey(chatId))
            UserStates[chatId] = new UserState();
        var state = UserStates[chatId];

        if (VerifiedUsers.ContainsKey(chatId))
        {
            state.StudentId = int.Parse(VerifiedUsers[chatId]);
        }

        if (message.Text == "/start")
        {
            var student = studentService.GetStudentByTelegramId((int)chatId);
            if (student != null)
            {
                state.StudentId = student.Id;
                VerifiedUsers[chatId] = student.Id.ToString();
                var kb = new ReplyKeyboardMarkup(new[]
                {
                    new[] { new KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è") },
                    new[] { new KeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏") }
                })
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = false
                };
                await botClient.SendMessage(chatId, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", replyMarkup: kb);
                return;
            }
            state.Reset();
            await botClient.SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:");
            state.Step = 1;
            return;
        }

        if (VerifiedUsers.ContainsKey(chatId) &&
            (message.Text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" ||
             message.Text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏" || message.Text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏" ||
             message.Text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" || message.Text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
        {
            var studentId = int.Parse(VerifiedUsers[chatId]);
            if (message.Text == "üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏" || message.Text == "–ú–æ–∏ –∑–∞–ø–∏—Å–∏")
            {
                var lessons = lessonService.GetLessonsByStudent(studentId);
                if (lessons.Count == 0)
                {
                    await botClient.SendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.");
                }
                else
                {
                    var inlineKeyboard = new InlineKeyboardMarkup(
                        lessons.Select(l => new[] {
                            InlineKeyboardButton.WithCallbackData($"üìö {l.Subject} {l.StartTime:dd.MM HH:mm}", $"lesson_{l.Id}")
                        })
                    );
                    await botClient.SendMessage(chatId, "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", replyMarkup: inlineKeyboard);
                }
                return;
            }
            if (message.Text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è" || message.Text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
            {
                state.Reset();
                state.StudentId = studentId;
                var subjects = subjectService.GetSubjects();
                state.Subjects = subjects;
                var keyboard = new ReplyKeyboardMarkup(
                    subjects.Select(s => new List<KeyboardButton> { new KeyboardButton(s) })
                )
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };
                await botClient.SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", replyMarkup: keyboard);
                state.Step = 2;
                return;
            }
        }

        switch (state.Step)
        {
            case 1:
                state.FullName = message.Text!;
                var subjects = subjectService.GetSubjects();
                state.Subjects = subjects;
                if (subjects.Count == 0)
                {
                    await botClient.SendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
                    state.Reset();
                    break;
                }
                var keyboard = new ReplyKeyboardMarkup(
                    subjects.Select(s => new List<KeyboardButton> { new KeyboardButton(s) })
                )
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };
                await botClient.SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", replyMarkup: keyboard);
                state.Step = 2;
                break;
            case 2:
                if (!state.Subjects.Contains(message.Text!))
                {
                    await botClient.SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.");
                    return;
                }
                state.Subject = message.Text!;
                var teacher = teacherService.GetTeacher();
                if (teacher == null)
                {
                    await botClient.SendMessage(chatId, "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    state.Reset();
                    return;
                }
                var slots = slotService.GetAvailableSlots(teacher.Id, state.Subject);
                if (slots.Count == 0)
                {
                    await botClient.SendMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç.");
                    state.Step = 1;
                    return;
                }
                state.Step = 3;
                state.SlotIds = slots.Select(s => s.Id).ToList();
                var slotKeyboard = new ReplyKeyboardMarkup(
                    slots.Select(s => new List<KeyboardButton> { new KeyboardButton($"{s.StartTime:yyyy-MM-dd HH:mm} - {s.EndTime:HH:mm}") }).ToList()
                )
                {
                    ResizeKeyboard = true,
                    OneTimeKeyboard = true
                };
                state.SlotMap = slots.ToDictionary(
                    s => $"{s.StartTime:yyyy-MM-dd HH:mm} - {s.EndTime:HH:mm}",
                    s => s.Id
                );
                await botClient.SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ª–æ—Ç:", replyMarkup: slotKeyboard);
                break;
            case 3:
                if (state.SlotMap == null || !state.SlotMap.ContainsKey(message.Text!))
                {
                    await botClient.SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.");
                    return;
                }
                state.SelectedSlotId = state.SlotMap[message.Text!];
                await botClient.SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +77XXXXXXXXX –∏–ª–∏ 87XXXXXXXXX):");
                state.Step = 4;
                break;
            case 4:
                state.Phone = message.Text!;
                var phonePattern = @"^(\+7|8)7\d{9}$";
                if (!Regex.IsMatch(state.Phone, phonePattern))
                {
                    await botClient.SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +77XXXXXXXXX –∏–ª–∏ 87XXXXXXXXX:");
                    return;
                }
                var code = new Random().Next(1000, 9999).ToString();
                PendingCodes[chatId] = code;
                var phoneForApi = state.Phone.Replace("+", "");
                var text = Uri.EscapeDataString($"–í–∞—à –∫–æ–¥: {code}");
                var url = $"https://api.callmebot.com/whatsapp.php?phone={phoneForApi}&text={text}&apikey={CallMeBotApiKey}";
                try
                {
                    var resp = await httpClient.GetAsync(url);
                    var respText = await resp.Content.ReadAsStringAsync();
                    if (!resp.IsSuccessStatusCode || respText.Contains("Message not sent") || respText.Contains("error"))
                    {
                        await botClient.SendMessage(chatId, $"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {respText}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ WhatsApp).");
                        return;
                    }
                }
                catch (Exception ex)
                {
                    await botClient.SendMessage(chatId, $"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {ex.Message}");
                    return;
                }
                await botClient.SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à—ë–ª –≤–∞–º –≤ WhatsApp:");
                state.Step = 5;
                break;
            case 5:
                if (!PendingCodes.ContainsKey(chatId) || message.Text != PendingCodes[chatId])
                {
                    await botClient.SendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:");
                    return;
                }
                // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –ë–î
                var student = studentService.GetOrCreateStudent((int)chatId, state.FullName!, state.Phone);
                state.StudentId = student.Id;
                VerifiedUsers[chatId] = student.Id.ToString(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º studentId –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                PendingCodes.Remove(chatId);
                var slotToBook = slotService.GetSlotById(state.SelectedSlotId);
                if (slotToBook == null || slotToBook.IsBooked)
                {
                    await botClient.SendMessage(chatId, "–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.");
                    state.Step = 2;
                    return;
                }
                var allSlotsThisTime = slotService.GetAvailableSlots(teacherService.GetTeacher().Id, null)
                    .Where(s => s.StartTime == slotToBook.StartTime && s.EndTime == slotToBook.EndTime && !s.IsBooked)
                    .ToList();
                foreach (var slot in allSlotsThisTime)
                {
                    slotService.BookSlot(slot.Id);
                }
                var lessonBooked = lessonService.BookLesson(state.StudentId, slotToBook.TeacherId, slotToBook.Subject, slotToBook.StartTime, slotToBook.EndTime);
                await botClient.SendMessage(chatId, $"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{slotToBook.Subject}' {slotToBook.StartTime:yyyy-MM-dd HH:mm}!");
                state.Reset();
                break;
            default:
                if (message.Text == "/mylessons")
                {
                    if (!VerifiedUsers.ContainsKey(chatId))
                    {
                        await botClient.SendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ WhatsApp. –í–≤–µ–¥–∏—Ç–µ /start.");
                        return;
                    }
                    var studentId = int.Parse(VerifiedUsers[chatId]);
                    var lessons = lessonService.GetLessonsByStudent(studentId);
                    if (lessons.Count == 0)
                    {
                        await botClient.SendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è.");
                        return;
                    }
                    var lessonsText = string.Join("\n", lessons.Select(l => $"{l.Id}: {l.Subject} {l.StartTime:yyyy-MM-dd HH:mm}"));
                    await botClient.SendMessage(chatId, $"–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{lessonsText}\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –æ—Ç–º–µ–Ω–∞ <id>");
                    return;
                }
                if (message.Text != null && message.Text.StartsWith("–æ—Ç–º–µ–Ω–∞ "))
                {
                    if (!VerifiedUsers.ContainsKey(chatId))
                    {
                        await botClient.SendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ WhatsApp. –í–≤–µ–¥–∏—Ç–µ /start.");
                        return;
                    }
                    var studentId = int.Parse(VerifiedUsers[chatId]);
                    var parts = message.Text.Split(' ');
                    if (parts.Length != 2 || !int.TryParse(parts[1], out var lessonId))
                    {
                        await botClient.SendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –æ—Ç–º–µ–Ω–∞ <id>");
                        return;
                    }
                    var lessons = lessonService.GetLessonsByStudent(studentId);
                    var lesson = lessons.FirstOrDefault(l => l.Id == lessonId);
                    if (lesson == null)
                    {
                        await botClient.SendMessage(chatId, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                        return;
                    }
                    var slot = slotService.GetSlotById(lesson.Id);
                    if (slot != null)
                    {
                        slot.IsBooked = false;
                        scope.ServiceProvider.GetRequiredService<TutorDbContext>().SaveChanges();
                    }
                    scope.ServiceProvider.GetRequiredService<TutorDbContext>().Lessons.Remove(lesson);
                    scope.ServiceProvider.GetRequiredService<TutorDbContext>().SaveChanges();
                    await botClient.SendMessage(chatId, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                    return;
                }
                await botClient.SendMessage(chatId, "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ /start. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π ‚Äî /mylessons");
                break;
        }
    }

    private Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken ct)
    {
        return Task.CompletedTask;
    }

    private class UserState
    {
        public int Step { get; set; } = 0;
        public string? FullName { get; set; }
        public string? Phone { get; set; }
        public int StudentId { get; set; }
        public List<string> Subjects { get; set; } = new();
        public string? Subject { get; set; }
        public DateTime? StartTime { get; set; }
        public List<int> SlotIds { get; set; } = new();
        public Dictionary<string, int>? SlotMap { get; set; }
        public int SelectedSlotId { get; set; }
        public void Reset()
        {
            Step = 0;
            FullName = null;
            Phone = null;
            StudentId = 0;
            Subjects = new();
            Subject = null;
            StartTime = null;
            SlotIds = new();
            SlotMap = null;
            SelectedSlotId = 0;
        }
    }
}